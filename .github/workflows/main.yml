# =================================================================
#            Build OpenWrt Package - Optimized Workflow
# =================================================================
#
# This workflow includes:
# - Correct YAML syntax and indentation.
# - Robust SDK download step with detailed logging.
# - Automatic selection of dependencies to prevent linker errors.
# - Updated actions versions for better performance and security.
#
# =================================================================

name: Build OpenWrt Package for AW1000

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  OPENWRT_TARGET: mediatek
  OPENWRT_SUBTARGET: filogic
  OPENWRT_BRANCH: snapshots

jobs:
  build:
    # Use a more modern runner environment
    runs-on: ubuntu-22.04
    
    steps:
    # -------------------------------------------------------------
    # Step 1: Check out the repository code
    # -------------------------------------------------------------
    - name: Checkout repository
      uses: actions/checkout@v4

    # -------------------------------------------------------------
    # Step 2: Install necessary build dependencies on the runner
    # -------------------------------------------------------------
    - name: Initialize build environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget python3-pyelftools python3-setuptools python3-dev libpython3-dev subversion

    # -------------------------------------------------------------
    # Step 3: Download and extract the OpenWrt SDK
    # This version includes detailed logging to debug download issues.
    # -------------------------------------------------------------
    - name: Download and Extract OpenWrt SDK
      env:
        TARGET: ${{ env.OPENWRT_TARGET }}
        SUBTARGET: ${{ env.OPENWRT_SUBTARGET }}
        BRANCH: ${{ env.OPENWRT_BRANCH }}
      run: |
        echo "--- Fetching SDK info for ${TARGET}/${SUBTARGET} (${BRANCH}) ---"
        SDK_NAME=$(curl -s https://downloads.openwrt.org/${BRANCH}/targets/${TARGET}/${SUBTARGET}/ | grep -oP 'openwrt-sdk-.*?tar.xz' | head -n 1)
        if [ -z "$SDK_NAME" ]; then
          echo "Error: Unable to find OpenWrt SDK archive. Exiting."
          exit 1
        fi
        wget --no-verbose https://downloads.openwrt.org/${BRANCH}/targets/${TARGET}/${SUBTARGET}/${SDK_NAME}
        echo "--- Extracting SDK: ${SDK_NAME} ---"
        tar -xf ${SDK_NAME}
        mv openwrt-sdk-* openwrt-sdk
        echo "--- SDK is ready in 'openwrt-sdk' directory ---"

    # -------------------------------------------------------------
    # Step 4: Prepare package source code inside the SDK
    # -------------------------------------------------------------
    - name: Prepare package source
      run: |
        cd openwrt-sdk
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        # Copy the source code into the package directory
        mkdir -p package/DbusSmsForwardCPlus
        rsync -a --exclude='.git/' --exclude='.github/' $GITHUB_WORKSPACE/ package/DbusSmsForwardCPlus/

    # -------------------------------------------------------------
    # Step 5: Create Makefiles needed for compilation
    # -------------------------------------------------------------
    - name: Create package Makefiles
      run: |
        # Main package Makefile
        cat > openwrt-sdk/package/DbusSmsForwardCPlus/Makefile << 'EOL'
        include $(TOPDIR)/rules.mk
        PKG_NAME:=DbusSmsForwardCPlus
        PKG_VERSION:=1.0.0
        PKG_RELEASE:=1
        PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)-$(PKG_VERSION)
        PKG_LICENSE:=GPL-3.0
        include $(INCLUDE_DIR)/package.mk
        define Package/DbusSmsForwardCPlus
          SECTION:=utils
          CATEGORY:=Utilities
          TITLE:=SMS forwarding tool via D-Bus
          DEPENDS:=+dbus +libcurl +libstdcpp +libpthread
        endef
        define Build/Prepare
        	mkdir -p $(PKG_BUILD_DIR)
        	$(CP) ./*.cpp $(PKG_BUILD_DIR)/ 2>/dev/null || true
        	$(CP) ./*.h $(PKG_BUILD_DIR)/ 2>/dev/null || true
        	$(CP) ./src/* $(PKG_BUILD_DIR)/ 2>/dev/null || true
        endef
        define Build/Compile
        	$(MAKE) -C $(PKG_BUILD_DIR) \
        		CC="$(TARGET_CC)" CXX="$(TARGET_CXX)" \
        		CFLAGS="$(TARGET_CFLAGS)" CXXFLAGS="$(TARGET_CXXFLAGS) -std=c++11 -pthread" \
        		LDFLAGS="$(TARGET_LDFLAGS)" LIBS="-ldbus-1 -lcurl -lpthread" \
        		-f $(CURDIR)/Makefile.build
        endef
        define Package/DbusSmsForwardCPlus/install
        	$(INSTALL_DIR) $(1)/usr/bin
        	$(INSTALL_BIN) $(PKG_BUILD_DIR)/DbusSmsForwardCPlus $(1)/usr/bin/
        endef
        $(eval $(call BuildPackage,DbusSmsForwardCPlus))
        EOL

        # Makefile for compiling the C++ code itself
        cat > openwrt-sdk/package/DbusSmsForwardCPlus/Makefile.build << 'EOL'
        SOURCES = $(wildcard *.cpp)
        OBJECTS = $(SOURCES:.cpp=.o)
        TARGET = DbusSmsForwardCPlus
        CXXFLAGS += -std=c++11 -pthread -Wall -O2
        LIBS += -ldbus-1 -lcurl -lpthread
        all: $(TARGET)
        $(TARGET): $(OBJECTS)
        	$(CXX) $(OBJECTS) -o $@ $(LDFLAGS) $(LIBS)
        %.o: %.cpp
        	$(CXX) $(CXXFLAGS) -c $< -o $@
        clean:
        	rm -f $(OBJECTS) $(TARGET)
        EOL

    # -------------------------------------------------------------
    # Step 6: Configure build and automatically select dependencies
    # This step is crucial to prevent linker errors.
    # -------------------------------------------------------------
    - name: Generate configuration and select packages
      run: |
        cd openwrt-sdk
        make defconfig
        echo "CONFIG_PACKAGE_DbusSmsForwardCPlus=m" >> .config
        echo "CONFIG_PACKAGE_libcurl=m" >> .config
        echo "CONFIG_PACKAGE_dbus=m" >> .config
        echo "CONFIG_PACKAGE_libstdcpp=m" >> .config
        make defconfig

    # -------------------------------------------------------------
    # Step 7: Compile the package
    # -------------------------------------------------------------
    - name: Build the package
      run: |
        cd openwrt-sdk
        make package/DbusSmsForwardCPlus/compile V=s -j$(nproc)
        
    # -------------------------------------------------------------
    # Step 8: Organize and prepare artifacts for upload
    # -------------------------------------------------------------
    - name: Organize files for upload
      run: |
        mkdir -p ./artifact
        find openwrt-sdk/bin/ -name "*.ipk" -exec cp {} ./artifact/ \;
        
    # -------------------------------------------------------------
    # Step 9: Upload the compiled .ipk file
    # -------------------------------------------------------------
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: DbusSmsForwardCPlus-${{ env.OPENWRT_TARGET }}-${{ env.OPENWRT_SUBTARGET }}
        path: ./artifact/*.ipk
